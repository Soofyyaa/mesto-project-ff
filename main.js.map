{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":[" const cardTemplate = document.getElementById(\"card-template\").content; // @todo: Темплейт карточки\r\n// @todo: Функция создания карточки с лайком, удалением и открытием картинки\r\nexport function createCard(\r\n  element,\r\n  removeCard,\r\n  likeCardCallback,\r\n  openImagePopup,\r\n  profileId\r\n) {\r\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\r\n  const cardImg = cardElement.querySelector(\".card__image\");\r\n  const delButton = cardElement.querySelector(\".card__delete-button\");\r\n  const buttonLike = cardElement.querySelector(\".card__like-button\");\r\n  const countLike = cardElement.querySelector(\".like-count\");\r\n\r\n  cardElement.querySelector(\".card__title\").textContent = element.name;\r\n  cardImg.src = element.link;\r\n  cardImg.alt = element.name;\r\n  countLike.textContent = element.likes.length;\r\n\r\n  cardImg.addEventListener(\"click\", (evt) => {\r\n    openImagePopup(element.link, element.name);\r\n  });\r\n\r\n  if (element.likes.some((like) => like._id === profileId)) {\r\n    likeCard(buttonLike);\r\n  }\r\n\r\n  if (profileId === element.owner._id) {\r\n    delButton.addEventListener(\"click\", (evt) => {\r\n      removeCard(cardElement, element._id);\r\n    });\r\n  } else {\r\n    delButton.remove();\r\n  }\r\n  buttonLike.addEventListener(\"click\", (evt) => {\r\n    likeCardCallback(buttonLike, element._id, countLike);\r\n  });\r\n\r\n  return cardElement;\r\n}\r\n\r\n// Функция лайка карточки\r\nexport function likeCard(buttonLike) {\r\n  buttonLike.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\n//Функция удаления карточки\r\nexport function deleteCard(card) {\r\n  card.remove();\r\n}\r\n\r\nexport function isActiveLikeButton(buttonLike) {\r\n  if (buttonLike.classList.contains(\"card__like-button_is-active\")) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","//Функция открытый попап\r\nexport function openPopup(popup) {\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closePopupEsc); // слушатель esc на открытый попап\r\n}\r\n\r\n//Функция закрытый попап\r\nexport function closePopup(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closePopupEsc); //удаление esc слушателя при закрытом попапе\r\n}\r\n\r\n//Функция закрытия попапа на esc\r\nfunction closePopupEsc(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const popup = document.querySelector(\".popup_is-opened\");\r\n    closePopup(popup);\r\n  }\r\n}\r\n\r\n//Функция закрытия попапа на overlay\r\nexport function closePopupOverlay(evt) {\r\n  if (evt.target === evt.currentTarget) {\r\n    closePopup(evt.target);\r\n  }\r\n}\r\n","const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-7\",\r\n  headers: {\r\n    authorization: \"cae27cf2-a4c3-44d6-bba0-db38265eacc9\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nfunction getResponseData(res) {\r\n  if (!res.ok) {\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n  return res.json();\r\n}\r\n\r\n//изменение данных о пользователе\r\nexport function editProfile(name, about) {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n// добавление карточек\r\nexport function addCard(name, link) {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      name: name,\r\n      link: link,\r\n    }),\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n// запрос информации о пользователе\r\nexport function getProfile() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: config.headers,\r\n    method: \"GET\",\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n//запрос карточек\r\nexport function getCards() {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: config.headers,\r\n    method: \"GET\",\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n//удаление карточек\r\nexport function removeCard(id) {\r\n  return fetch(`${config.baseUrl}/cards/${id}`, {\r\n    headers: config.headers,\r\n    method: \"DELETE\",\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n//постановка лайка\r\nexport function addLike(id) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n    headers: config.headers,\r\n    method: \"PUT\",\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n//удаление лайка\r\nexport function removeLike(id) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n    headers: config.headers,\r\n    method: \"DELETE\",\r\n  }).then((res) => getResponseData(res));\r\n}\r\n\r\n//запрос на замену аватара\r\nexport function editAvatar(avatar) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    headers: config.headers,\r\n    method: \"PATCH\",\r\n    body: JSON.stringify({\r\n      avatar: avatar,\r\n    }),\r\n  }).then((res) => getResponseData(res));\r\n}\r\n","//отображение ошибки\r\nconst showInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  errorElement.textContent = inputElement.validationMessage;\r\n  inputElement.classList.add(validationConfig.inputErrorClass);\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n//скрытие ошибки\r\nconst hideInputError = (formElement, inputElement, validationConfig) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  errorElement.textContent = \"\";\r\n  inputElement.classList.remove(validationConfig.inputErrorClass);\r\n  errorElement.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n//проверка форм и инпутов: если есть ошибка, то вывод либо спанового сообщения об ошибке, либо кастомного\r\nexport const isValid = (formElement, inputElement, validationConfig) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n  if (inputElement.checkValidity()) {\r\n    hideInputError(formElement, inputElement, validationConfig);\r\n  } else {\r\n    showInputError(formElement, inputElement, validationConfig);\r\n  }\r\n};\r\n\r\n//находим все инупты и привязываем к событию, где потом проверяем\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n\r\n  // ищем кнопку\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  // При инициализации сразу установим состояние кнопки в зависимости от того, валидны ли инпуты\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, validationConfig);\r\n\r\n      toggleButtonState(inputList, buttonElement, validationConfig);\r\n    });\r\n  });\r\n};\r\n\r\n//собираем все формы\r\nexport const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(\r\n    document.querySelectorAll(validationConfig.formSelector)\r\n  );\r\n\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n//проверяем есть ли хоть одна ошибка в форме\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n//отключение или включение кнопки\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.disabled = true;\r\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n    return;\r\n  }\r\n\r\n  buttonElement.disabled = false;\r\n  buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n};\r\n\r\n// чистка всех полей формы\r\nexport const clearValidation = (formElement, validationConfig) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(validationConfig.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(\r\n    validationConfig.submitButtonSelector\r\n  );\r\n\r\n  inputList.forEach((input) => {\r\n    hideInputError(formElement, input, validationConfig);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n};\r\n","import \"./pages/index.css\";\r\nimport {\r\n  createCard,\r\n  deleteCard,\r\n  likeCard,\r\n  isActiveLikeButton,\r\n} from \"./components/card.js\";\r\nimport {\r\n  openPopup,\r\n  closePopup,\r\n  closePopupOverlay,\r\n} from \"./components/modal.js\";\r\nimport {\r\n  getProfile,\r\n  getCards,\r\n  editProfile,\r\n  addCard,\r\n  removeCard,\r\n  addLike,\r\n  removeLike,\r\n  editAvatar,\r\n} from \"./components/api.js\";\r\n\r\nimport {\r\n  isValid,\r\n  enableValidation,\r\n  clearValidation,\r\n} from \"./components/validation.js\";\r\n\r\nconst validationConfig = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_inactive\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"form__input-error_active\",\r\n};\r\n\r\n//Поиск элементов, кнопок и попапов\r\nconst content = document.querySelector(\".content\"); // @todo: DOM узлы\r\nconst placesList = content.querySelector(\".places__list\"); //список карточек\r\nconst typeImage = document.querySelector(\".popup_type_image\"); //попап открытия  картинки\r\nconst popupImage = document.querySelector(\".popup__image\"); //картинка для большого попапа\r\nconst captionPopup = document.querySelector(\".popup__caption\"); //подпись к большому попапу\r\nconst closeButtons = document.querySelectorAll(\".popup__close\"); //кнопки крестика, закрывающие ЛЮБОЙ попап\r\nconst nameTitle = document.querySelector(\".profile__title\"); // имя в профиле\r\nconst jobTitle = document.querySelector(\".profile__description\"); //занятие в профиле\r\nconst formProfile = document.forms[\"edit-profile\"]; //Находим  форму профиля\r\nconst nameInput = formProfile.elements.name; //Находим поле имени\r\nconst jobInput = formProfile.elements.description; //Находим поле занятия\r\nconst formCard = document.forms[\"new-place\"]; //Находим  форму создания карточки\r\nconst nameNewCard = formCard.elements[\"place-name\"]; //Находим поле названия города\r\nconst imageNewCard = formCard.elements.link; //Находим поле для ссылки на картинку\r\nconst buttonAddButton = document.querySelector(\".profile__add-button\"); //кнопка добавления новой карточки\r\nconst newPlace = document.querySelector(\".popup_type_new-card\"); // вытащили элемент с классом попапа создания новой карточки\r\nconst buttonProfile = document.querySelector(\".profile__edit-button\"); //кнопка класса попапа профиля\r\nconst popupTypeEdit = document.querySelector(\".popup_type_edit\"); //вытащили элемент с классом попапа профиля\r\nconst profileImg = document.querySelector(\".profile__image\"); //картиночка профиля))\r\nconst popupAvatar = document.querySelector(\".popup_change_avatar\"); // вытащили попап замены аватара\r\nconst formAvatar = document.forms[\"change_avatar\"]; //форма аватара\r\nconst inputAvatar = formAvatar.elements.link; //Находим поле для ссылки на картинку аватара\r\n\r\nconst overlays = document.querySelectorAll(\".popup\");\r\nlet profileId;\r\n\r\n//Функция, закрывающая попап, который открыт\r\nfunction closeButtonPopup(evt) {\r\n  const popupOpen = evt.target.closest(\".popup\");\r\n  closePopup(popupOpen);\r\n}\r\n\r\n//перебор и вешание слушателя, на каждый элемент массива с кнопками закрытия\r\ncloseButtons.forEach(function (item) {\r\n  item.addEventListener(\"click\", closeButtonPopup);\r\n});\r\n\r\noverlays.forEach((popup) => {\r\n  popup.addEventListener(\"click\", closePopupOverlay);\r\n});\r\n\r\n//Функция открытия большого попапа\r\nfunction openImagePopup(imageUrl, imageCaption) {\r\n  popupImage.src = imageUrl;\r\n  popupImage.alt = imageCaption;\r\n  captionPopup.textContent = imageCaption;\r\n  openPopup(typeImage);\r\n}\r\n\r\n//слушатель открытия попапа редактирования аватара\r\nprofileImg.addEventListener(\"click\", () => {\r\n  openPopup(popupAvatar);\r\n  clearValidation(popupAvatar, validationConfig);\r\n});\r\n\r\n//слушатель открытия попапа профиля\r\nbuttonProfile.addEventListener(\"click\", () => {\r\n  openPopup(popupTypeEdit);\r\n  nameInput.value = nameTitle.textContent;\r\n  jobInput.value = jobTitle.textContent;\r\n  clearValidation(popupTypeEdit, validationConfig);\r\n});\r\n\r\n// слушатель открытия попапа для создания новой карточки\r\nbuttonAddButton.addEventListener(\"click\", () => {\r\n  openPopup(newPlace);\r\n  clearValidation(newPlace, validationConfig);\r\n});\r\n\r\n// Обработчик «отправки» формы в профиле\r\nfunction handleFormSubmitProfile(evt) {\r\n  evt.preventDefault();\r\n  const submitButton = formProfile.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  editProfile(nameInput.value, jobInput.value)\r\n    .then((profile) => {\r\n      initialProfile(profile);\r\n      closePopup(popupTypeEdit);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Не удалось отредактировать данные профиля\", error);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик к форме: он будет следить за событием “submit” - «отправка»\r\nformProfile.addEventListener(\"submit\", handleFormSubmitProfile);\r\n\r\n// Обработчик «отправки» формы для новой карточки\r\nfunction addNewCardHandler(evt) {\r\n  evt.preventDefault();\r\n  const submitButton = formCard.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  addCard(nameNewCard.value, imageNewCard.value)\r\n    .then((card) => {\r\n      const addNewCard = createCard(\r\n        card,\r\n        removeCardCallback,\r\n        likeCardCallback,\r\n        openImagePopup,\r\n        profileId\r\n      );\r\n\r\n      placesList.prepend(addNewCard);\r\n      closePopup(newPlace);\r\n      formCard.reset();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Не удалось добавить новую карточку\", error);\r\n    })\r\n    .finally(() => {\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик к форме: он будет следить за событием “submit” - «отправка»\r\nformCard.addEventListener(\"submit\", addNewCardHandler);\r\n\r\nfunction addNewAvatarHandler(evt) {\r\n  evt.preventDefault();\r\n  const submitButton = popupAvatar.querySelector(\".popup__button\");\r\n  const originalButtonText = submitButton.textContent;\r\n  submitButton.textContent = \"Сохранение...\";\r\n  editAvatar(inputAvatar.value)\r\n    .then((avatar) => {\r\n      initialAvatar(avatar);\r\n      closePopup(popupAvatar);\r\n      formAvatar.reset();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Не удалось отредактировать аватар\", error);\r\n    })\r\n    .finally((avatar) => {\r\n      submitButton.textContent = originalButtonText;\r\n    });\r\n}\r\n\r\nformAvatar.addEventListener(\"submit\", addNewAvatarHandler);\r\n\r\nfunction initialAvatar(url) {\r\n  profileImg.style.backgroundImage = `url(${url.avatar})`;\r\n}\r\n\r\nfunction initialProfile(profile) {\r\n  nameTitle.textContent = profile.name;\r\n  jobTitle.textContent = profile.about;\r\n  profileImg.style.backgroundImage = `url(${profile.avatar})`;\r\n  profileId = profile._id;\r\n}\r\n\r\nfunction initialCards(cards) {\r\n  cards.forEach(function (item) {\r\n    placesList.append(\r\n      createCard(\r\n        item,\r\n        removeCardCallback,\r\n        likeCardCallback,\r\n        openImagePopup,\r\n        profileId\r\n      )\r\n    );\r\n  });\r\n}\r\n\r\nPromise.all([getProfile(), getCards()])\r\n  .then(([profile, cards]) => {\r\n    initialProfile(profile);\r\n    initialCards(cards);\r\n  })\r\n  .catch(() => {\r\n    console.log(\"Не удалось загрузить данные профиля и карточки\");\r\n  });\r\n\r\nfunction removeCardCallback(element, id) {\r\n  removeCard(id)\r\n    .then(() => {\r\n      deleteCard(element);\r\n    })\r\n    .catch((errorMessage) => console.log(errorMessage));\r\n}\r\n\r\nfunction likeCardCallback(buttonLike, cardId, likeCountElement) {\r\n  if (isActiveLikeButton(buttonLike)) {\r\n    removeLike(cardId)\r\n      .then((card) => {\r\n        likeCard(buttonLike);\r\n        likeCountElement.textContent = card.likes.length;\r\n      })\r\n      .catch((errorMessage) => console.log(errorMessage));\r\n  } else {\r\n    addLike(cardId)\r\n      .then((card) => {\r\n        likeCard(buttonLike);\r\n        likeCountElement.textContent = card.likes.length;\r\n      })\r\n      .catch((errorMessage) => console.log(errorMessage));\r\n  }\r\n}\r\n\r\nenableValidation(validationConfig);\r\n"],"names":["cardTemplate","document","getElementById","content","createCard","element","removeCard","likeCardCallback","openImagePopup","profileId","cardElement","querySelector","cloneNode","cardImg","delButton","buttonLike","countLike","textContent","name","src","link","alt","likes","length","addEventListener","evt","some","like","_id","likeCard","owner","remove","classList","toggle","openPopup","popup","add","closePopupEsc","closePopup","removeEventListener","key","closePopupOverlay","target","currentTarget","config","baseUrl","headers","authorization","getResponseData","res","ok","json","Promise","reject","concat","status","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","input","formSelector","placesList","typeImage","popupImage","captionPopup","closeButtons","nameTitle","jobTitle","formProfile","forms","nameInput","elements","jobInput","description","formCard","nameNewCard","imageNewCard","buttonAddButton","newPlace","buttonProfile","popupTypeEdit","profileImg","popupAvatar","formAvatar","inputAvatar","overlays","closeButtonPopup","closest","imageUrl","imageCaption","initialProfile","profile","about","style","backgroundImage","avatar","removeCardCallback","fetch","method","then","catch","errorMessage","console","log","cardId","likeCountElement","contains","isActiveLikeButton","addLike","card","item","value","preventDefault","submitButton","originalButtonText","body","JSON","stringify","error","finally","addNewCard","prepend","reset","url","all","_ref","_ref2","cards","append","initialCards","patternMismatch","setCustomValidity","dataset","checkValidity","validationMessage","showInputError","isValid","setEventListeners","enableValidation"],"sourceRoot":""}